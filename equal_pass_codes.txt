 if ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/') || (k[i + 1] == '.'))
                    {
                        answer.Text = "Invalid Computation";
                        break;
                    }



/*   string s = Display.Text.ToString();
              int i, count = 0, n = s.Length;
              char[] k = s.ToCharArray();
              List<int> keys = new List<int>();
              for (i = 0; i < n; i++)
              {
                  if ((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/'))
                  {
                          keys.Add(i);
                          count += 1;
                  }
              }
             string[] values = s.Split();*/


            /*  int j = -1, p=0;
              string[] values = new string[count+1];
              while ( i <= count)
              {

                  while (j < n)
                  {
                      j += 1;
                      if ((k[j] != '+') || (k[j] != '-') || (k[j] != '*') || (k[j] != '/'))
                      {
                          values[p] += k[j];
                          j++;
                      }
                      else
                          p++;
                  }
              }
              answer.Text = values[0]; */

            /*   List<int> number = new List<int>();
            for (i = 0; i <= count; i++)
            {
                number[i] = int.Parse(values[i].ToString());
            }
            int output = 0;
            for (i = 0; i < count; i++)
            {
     
                    if (keys[i] == '+')
                    {
                        output += (number[i] + number[i + 1]);
                    }
                    if (keys[i] == '-')
                    {
                        output += (number[i] - number[i + 1]);
                    }
                    if (keys[i] == '*')
                    {
                        output += (number[i] * number[i + 1]);
                    }
                    if (keys[i] == '/')
                    {
                        output += (number[i] / number[i + 1]);
                    }
            }
            answer.Text = output.ToString(); 





  private void equal_Click(object sender, EventArgs e)
        {
            string s = Display.Text.ToString();
            char inp_char;
            char[] symbols = new char[4];
            symbols[0] = '+'; symbols[1] = '-'; symbols[2] = '*'; symbols[3] = '/';
            string[] value = s.Split(symbols);
            inp_char = Symbolfind(s);
            if (inp_char == '+')
                answer.Text = (int.Parse(value[0]) + int.Parse(value[1])).ToString();
            if (inp_char == '-')
                answer.Text = (int.Parse(value[0]) - int.Parse(value[1])).ToString();
            if (inp_char == '*')
                answer.Text = (int.Parse(value[0]) * int.Parse(value[1])).ToString();
            if (inp_char == '/')
                answer.Text = (int.Parse(value[0]) / int.Parse(value[1])).ToString();
            if (inp_char == ' ')
                answer.Text = s;
        }
        public char Symbolfind (string s)
        {
            char[] k = s.ToCharArray();
            int n = s.Length, i;
            char sym = ' ';
            for (i = 0; i < n; i++)
            {
                if ((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/'))
                {
                    sym = k[i];
                }
             }
            return sym;
        }



working code for single computation:


 private void equal_Click(object sender, EventArgs e)
        {
            string s = Display.Text.ToString();
            char inp_char;
            char[] symbols = new char[4];
            symbols[0] = '+'; symbols[1] = '-'; symbols[2] = '*'; symbols[3] = '/';
            string[] value = s.Split(symbols);
            inp_char = Symbolfind(s);
            char[] k = s.ToCharArray();
            int n = s.Length, i, pass=1;
            for (i = 0; i < n; i++)
            {
                if (((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/')) && ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/')))
                {
                    MessageBox.Show("Enter valid computation");
                    pass = 0;
                }
            }
            if (k[0]== '+')
            {
                value[0] = value[1];
                value[1] = value[2];
            }
            if (k[0] == '-')
            {
                value[0] = '-' + value[1];
                value[1] = value[2];
            }
            if ((k[0] == '*')|| (k[0] == '/'))
            {
                MessageBox.Show("Enter Valid Computation");
                pass = 0;
            }
            if (pass == 1)
            {
                if (inp_char == '+')
                    answer.Text = (float.Parse(value[0]) + float.Parse(value[1])).ToString();
                if (inp_char == '-')
                    answer.Text = (float.Parse(value[0]) - float.Parse(value[1])).ToString();
                if (inp_char == '*')
                    answer.Text = (float.Parse(value[0]) * float.Parse(value[1])).ToString();
                if (inp_char == '/')
                    answer.Text = (float.Parse(value[0]) / float.Parse(value[1])).ToString();
                if (inp_char == ' ')
                    answer.Text = s;
            }
        }
        public char Symbolfind (string s)
        {
            char[] k = s.ToCharArray();
            int n = s.Length, i;
            char sym = ' ';
            for (i = 0; i < n-1; i++)
                {
                    if ((k[i+1] == '+') || (k[i+1] == '-') || (k[i+1] == '*') || (k[i+1] == '/'))
                    {
                        sym = k[i+1];
                    }
                }
            return sym;
        }


Multiple:

  string s = Display.Text.ToString();
            List<char> inp_char = new List<char>();
            char[] symbols = new char[4];
            symbols[0] = '+'; symbols[1] = '-'; symbols[2] = '*'; symbols[3] = '/';
            string[] value = s.Split(symbols);
            int o = value.Length;
            inp_char.Add(Symbolfind(s));
            char[] k = s.ToCharArray();
            int n = s.Length, i, pass=1;
            for (i = 0; i < n; i++)
            {
                if (((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/')) && ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/')))
                {
                    MessageBox.Show("Enter valid computation");
                    pass = 0;
                }
            }
            if (k[0]== '+')
            {
                value[0] = value[1];
                value[1] = value[2];
            }
            if (k[0] == '-')
            {
                value[0] = '-' + value[1];
                value[1] = value[2];
            }
            if ((k[0] == '*')|| (k[0] == '/'))
            {
                MessageBox.Show("Enter Valid Computation");
                pass = 0;
            }
            int m = inp_char.Count;
            if (pass == 1)
            {
                for (i = 0; i < m-1; i++)
                {
                    if (inp_char[i] == '+')
                        value[i] = ((float.Parse(value[i])) + float.Parse(value[i+1])).ToString();
                    if (inp_char[i] == '-')
                        value[i] = ((float.Parse(value[i])) - float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '*')
                        value[i] = ((float.Parse(value[i])) * float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '/')
                        value[i] = ((float.Parse(value[i])) / float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == ' ')
                        answer.Text = s;
                }
                answer.Text = float.Parse(value[m - 1]).ToString();
            }
        }
        public char Symbolfind (string s)
        {
           char[] k = s.ToCharArray();
            int n = s.Length, i=0;
            char sym = ' ';
            int position =0;
            do
            {
                if ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/'))
                {
                    sym = k[i + 1];
                    position = Array.IndexOf(k, k[i + 1]);
                    i = position;
                    return sym;
                }
                else
                    i++;
            }

            while (i < n);
            
            return '&';
        }











        {
            string s = Display.Text.ToString();
            List<char> inp_char = new List<char>();
            char[] symbols = new char[4];
            symbols[0] = '+'; symbols[1] = '-'; symbols[2] = '*'; symbols[3] = '/';
            string[] value = s.Split(symbols);
            //    int o = value.Length;
            char[] k = s.ToCharArray();
            int n = s.Length;
           
            int i = 0;

            for (i = 0; i < n; i++)
            {
                if ((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/'))
                {
                    inp_char.Add(k[i]);
                }

            }



            int pass = 1;
            for (i = 0; i < n; i++)
            {
                if (((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/')) && ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/')))
                {
                    MessageBox.Show("Enter valid computation");
                    pass = 0;
                }
            }
            if (k[0] == '+')
            {
                value[0] = value[1];
                value[1] = value[2];
            }
            if (k[0] == '-')
            {
                value[0] = '-' + value[1];
                value[1] = value[2];
            }
            if ((k[0] == '*') || (k[0] == '/'))
            {
                MessageBox.Show("Enter Valid Computation");
                pass = 0;
            }
            int m = inp_char.Count;
            if (pass == 1)
            {
                for (i = 0; i < m; i++)
                {
                    if (inp_char[i] == '+')
                        value[i+1] = ((float.Parse(value[i])) + float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '-')
                        value[i+1] = ((float.Parse(value[i])) - float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '*')
                        value[i+1] = ((float.Parse(value[i])) * float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '/')
                        value[i+1] = ((float.Parse(value[i])) / float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == ' ')
                        answer.Text = s;
                }
                answer.Text = float.Parse(value[m]).ToString();
            }
        }

 string s = Display.Text.ToString();
            List<char> inp_char = new List<char>();
            char[] symbols = new char[4];
            symbols[0] = '+'; symbols[1] = '-'; symbols[2] = '*'; symbols[3] = '/';
            string[] value = s.Split(symbols);
            char[] k = s.ToCharArray();
            int n = s.Length;
            int i = 0;
            for (i = 0; i < n; i++)
            {
                if ((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/'))
                {
                    inp_char.Add(k[i]);
                }
             }
            int dummy = 0;
            int pass = 1;         
            for (i = 0; i < n; i++)
            {
                if ((k[i] == 'H') || (k[i] == 'e') || (k[i] == 'l') || (k[i] == 'o'))
                {
                    MessageBox.Show("Enter Valid Computation","Start the Calculator!");
                    pass = 0;
                    dummy = 1;
                    break;
                }
            }
            int l = 0;
            if (n == 0)
            {
                MessageBox.Show("Enter the number", "Alert");
                dummy = 1;
                 l = 1;
                pass = 3;
            }
            int  w = k.Length;
            if (l != 1)
            {
                if ((k[w - 1] == '+') || (k[w - 1] == '-') || (k[w - 1] == '*') || (k[w - 1] == '/'))
                {
                    MessageBox.Show("Enter Valid Computation");
                    pass = 0;
                    dummy = 1;
                }
            }
            int m = inp_char.Count;
            if (dummy != 1)
            {
                for (i = 0; i < n; i++)
                {
                    if (((k[i] == '+') || (k[i] == '-') || (k[i] == '*') || (k[i] == '/')) && ((k[i + 1] == '+') || (k[i + 1] == '-') || (k[i + 1] == '*') || (k[i + 1] == '/')))
                    {
                        MessageBox.Show("Enter valid computation");
                        pass = 0;
                        break;
                    }
                }

                if (k[0] == '+')
                {
                    for (i = 0; i < m; i++)
                    {
                        value[i] = value[i + 1];
                    }
                    pass = 2;
                 for (i = 0; i < m - 1; i++)
                    {
                        if (inp_char[i + 1] == '+')
                            value[i + 1] = ((float.Parse(value[i])) + float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '-')
                            value[i + 1] = ((float.Parse(value[i])) - float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '*')
                            value[i + 1] = ((float.Parse(value[i])) * float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '/')
                            value[i + 1] = ((float.Parse(value[i])) / float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == ' ')
                            answer.Text = s;
                    }
                    answer.Text = float.Parse(value[m - 1]).ToString();
                }
                if (k[0] == '-')
                {
                    for (i = 0; i < m; i++)
                    {
                        value[i] = value[i + 1];
                    }
                    value[0] = '-' + value[0];
                    pass = 2;

                    for (i = 0; i < m - 1; i++)
                    {
                        if (inp_char[i + 1] == '+')
                            value[i + 1] = ((float.Parse(value[i])) + float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '-')
                            value[i + 1] = ((float.Parse(value[i])) - float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '*')
                            value[i + 1] = ((float.Parse(value[i])) * float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == '/')
                            value[i + 1] = ((float.Parse(value[i])) / float.Parse(value[i + 1])).ToString();
                        if (inp_char[i + 1] == ' ')
                            answer.Text = s;
                    }
                    answer.Text = float.Parse(value[m - 1]).ToString();
                }
            }
            if (l != 1)
            {
                if ((k[0] == '*') || (k[0] == '/'))
                {
                    MessageBox.Show("Enter Valid Computation");
                    pass = 0;
                }
            }
            if (pass == 1)
            {
                for (i = 0; i < m; i++)
                {
                    if (inp_char[i] == '+')
                        value[i+1] = ((float.Parse(value[i])) + float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '-')
                        value[i+1] = ((float.Parse(value[i])) - float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '*')
                        value[i+1] = ((float.Parse(value[i])) * float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == '/')
                        value[i+1] = ((float.Parse(value[i])) / float.Parse(value[i + 1])).ToString();
                    if (inp_char[i] == ' ')
                        answer.Text = s;
                }
                answer.Text = float.Parse(value[m]).ToString();
            } 



            if ( clickvalue == 1)
            {
                string ans = Display.Text;
                float rec = float.Parse(s);
                answer.Text = (1 / rec).ToString();
            }
            if ((count ==1) && (dot <2))
            {
                equal_Click(null, new EventArgs(),1);
            } 